<?php

namespace MuseumsBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\Expr;
/**
 * MuseumRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MuseumRepository extends \Doctrine\ORM\EntityRepository
{

    public function search($data, $page = 0, $max = NULL, $getResult = true)
    {
        $qb = $this->_em->createQueryBuilder();
        $query = isset($data['query']) && $data['query']?$data['query']:null;

        $qb
            ->select('m')
            ->from('MuseumsBundle:Museum', 'm')
        ;

        if ($query) {
            $qb
                ->andWhere('m.name like :query')
                ->setParameter('query', "%".$query."%")
            ;
        }

        if ($max) {
            $preparedQuery = $qb->getQuery()
                ->setMaxResults($max)
                ->setFirstResult($page * $max)
            ;
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getResult?$preparedQuery->getResult():$preparedQuery;
    }

    function count_museums(){
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(museum.id)');
        $qb->from('MuseumsBundle:Museum','museum');

        $count = $qb->getQuery()->getSingleScalarResult();
        return $count;
    }

    function APIfind($filters){

        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('m')
            ->from('MuseumsBundle:Museum', 'm')
        ;

        if (!empty($filters))
        {
            foreach ($filters[0] as $key => $value)
            {
                if($key == '_format'){continue;}

                elseif ($key == 'date')
                {
                    $qb->leftJoin('MuseumsBundle:History\Museum_History', 'c_h', 'WITH', 'c_h.museum_id = c.id')
                        ->andWhere('c_h.date = :date')
                        ->setParameter('date', $value);
                }

                if($key == 'canton')
                {
                    $qb
                        ->innerJoin('m.canton', 'c', "WITH", "c.title = :canton")
                        ->setParameter("canton", $value)
                        ->addSelect('c')
                    ;
                }

                elseif ($key == 'categories')
                {
                    $qb
                        ->innerJoin('m.categories', 'cat', "WITH", "cat.title = :categories")
                        ->setParameter("categories", $value)
                    ;
                }

                elseif($key == 'criteres')
                {
                    $qb
                        ->innerJoin('m.criteres', 'cr', "WITH", "cr.title = :criteria")
                        ->setParameter("criteria", $value)
                    ;
                }

                elseif ($key == 'offset')
                {
                    $qb->setFirstResult($value-1);
                }

                elseif ($key == 'limit')
                {
                    $qb->setMaxResults($value);
                }

                else{
                    $qb->andWhere('m.'.$key.' = :value')
                        ->setParameter('value', $value);
                }
            }
        }

        /*var_dump($qb->getQuery()->getSQL());
        die('test');*/

        return $qb
            ->getQuery()
            ->getResult();
    }
}
